package windows;

import players.*;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import settings.*;
import static windows.Window.settings;

/**
 *
 * @author Bastiaan
 */
public class GamePanel extends javax.swing.JPanel implements Runnable, DefaultSettings, KeyListener, MouseListener, PlayerSettings {
    
    ArrayList<Player> players = new ArrayList<>();
    //Game settings
    //ControlsS
    int WALKLEFT = 65;
    int WALKRIGHT = 68;
    int PUNCH = 32;
    int KICK = 13;
    //Difficulty
    int difficulty;
    //Map
    Image map = MAP;
    /**
     * Creates new form GamePanel
     */
    public GamePanel() {
        initComponents();
        players.add(new MilanBot());
    }
    
    @Override
    public void paint(Graphics g) {
        super.paint(g);
        g.drawImage(map, 0, 0, null);
        for(Player p : players) {
            p.drawPlayer(g);
        }
    }
    
    /**
     *
     * @param map
     */
    public void setMap(String map) {
        try {
            switch(map) {
                case "City": this.map = Toolkit.getDefaultToolkit().createImage(".\\stadje.jpg");
                    break;
                case "Boat": this.map = Toolkit.getDefaultToolkit().createImage(".\\boodt.jpg");
                    break;
                case "Desert": this.map = Toolkit.getDefaultToolkit().createImage(".\\zandmapje.jpg");
                    break;
            }
            System.out.println(map);
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(102, 255, 200));
        setPreferredSize(new java.awt.Dimension(1152, 648));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 930, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 626, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void run() {
        System.out.println("run");
        long previousUpdate = System.currentTimeMillis();
        while(true) {
            if(System.currentTimeMillis() - previousUpdate >= UPDATEINTERVAL) {
                update();
                previousUpdate = System.currentTimeMillis();
            }
            this.repaint();
        }
    }

    @Override
    public void keyTyped(KeyEvent e) {
        
    }

    @Override
    public void keyPressed(KeyEvent e) {
        System.out.println(players.get(0).getxPos());
        if (e.getKeyChar() == settings.getKeyCodeLeft()) {
            players.get(0).setDx(players.get(0).getSPEED());
        } else if (e.getKeyChar() == settings.getKeyCodeRight()) {
            players.get(0).setDx(-players.get(0).getSPEED());
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
        if (e.getKeyChar() == settings.getKeyCodeLeft()) {
            players.get(0).setDx(ZERO);
        } else if (e.getKeyChar() == settings.getKeyCodeRight()) {
            players.get(0).setDx(ZERO);
        }
    }

    private void update() {
        for(Player p : players) {
            p.updatePos();
        }
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        this.requestFocus();
    }

    @Override
    public void mousePressed(MouseEvent e) {
        this.requestFocus();
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        
    }

    @Override
    public void mouseExited(MouseEvent e) {
        
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
